import { InjectionKey, Ref } from '@vue/composition-api';
import { StateTree, StoreWithState, StateDescriptor, PiniaCustomProperties, GettersTree, Store, DefineStoreOptions, ActionsTree, PiniaCustomStateProperties } from './types';
import type Vue from 'vue';
/**
 * The api needs more work we must be able to use the store easily in any
 * function by calling `useStore` to get the store Instance and we also need to
 * be able to reset the store instance between requests on the server
 */
export declare const storesMap: WeakMap<Pinia, Map<string, [StoreWithState<string, StateTree, GettersTree<StateTree>, ActionsTree>, StateDescriptor<StateTree>, InjectionKey<Store<string, StateTree, GettersTree<StateTree>, ActionsTree>>]>>;
export declare const piniaSymbol: InjectionKey<Pinia>;
/**
 * Context argument passed to Pinia plugins.
 */
export interface PiniaPluginContext<Id extends string = string, S extends StateTree = StateTree, G extends GettersTree<S> = GettersTree<S>, A = ActionsTree> {
    /**
     * pinia instance.
     */
    pinia: Pinia;
    /**
     * Current store being extended.
     */
    store: Store<Id, S, G, A>;
    /**
     * Current store being extended.
     */
    options: DefineStoreOptions<Id, S, G, A>;
}
/**
 * Plugin to extend every store
 */
export interface PiniaStorePlugin {
    /**
     * Plugin to extend every store. Returns an object to extend the store or
     * nothing.
     *
     * @param context - Context
     */
    (context: PiniaPluginContext): Partial<PiniaCustomProperties & PiniaCustomStateProperties> | void;
}
/**
 * Every application must own its own pinia to be able to create stores
 */
export interface Pinia {
    /**
     * root state
     */
    state: Ref<Record<string, StateTree>>;
    /**
     * Adds a store plugin to extend every store
     *
     * @alpha the plugin API could change in the future
     *
     * @param plugin - store plugin to add
     */
    use(plugin: PiniaStorePlugin): Pinia;
    /**
     * Installed store plugins
     *
     * @internal
     */
    _p: PiniaStorePlugin[];
}
declare module 'vue/types/vue' {
    interface Vue {
        /**
         * Currently installed pinia instance.
         */
        $pinia: Pinia;
        /**
         * Cache of stores instantiated by the current instance. Used by map
         * helpers.
         *
         * @internal
         */
        _pStores?: Record<string, Store>;
    }
}
declare module 'vue/types/options' {
    interface ComponentOptions<V extends Vue> {
        /**
         * Pinia instance to install in your application. Should be passed to the
         * root Vue.
         */
        pinia?: Pinia;
    }
}
/**
 * Creates a Pinia instance to be used by the application
 */
export declare function createPinia(): Pinia;
/**
 * setActivePinia must be called to handle SSR at the top of functions like
 * `fetch`, `setup`, `serverPrefetch` and others
 */
export declare let activePinia: Pinia | undefined;
/**
 * Sets or unsets the active pinia. Used in SSR and internally when calling
 * actions and getters
 *
 * @param pinia - Pinia instance
 */
export declare const setActivePinia: (pinia: Pinia | undefined) => Pinia | undefined;
/**
 * Get the currently active pinia
 */
export declare const getActivePinia: () => Pinia;
//# sourceMappingURL=rootStore.d.ts.map